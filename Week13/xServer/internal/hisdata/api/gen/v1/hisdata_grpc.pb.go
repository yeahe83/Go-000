// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package hisdatapb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HisdataServiceClient is the client API for HisdataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HisdataServiceClient interface {
	GetHisData(ctx context.Context, in *GetHisDataRequest, opts ...grpc.CallOption) (*GetHisDataResponse, error)
	GetRealData(ctx context.Context, in *GetRealRequest, opts ...grpc.CallOption) (*GetRealResponse, error)
}

type hisdataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHisdataServiceClient(cc grpc.ClientConnInterface) HisdataServiceClient {
	return &hisdataServiceClient{cc}
}

func (c *hisdataServiceClient) GetHisData(ctx context.Context, in *GetHisDataRequest, opts ...grpc.CallOption) (*GetHisDataResponse, error) {
	out := new(GetHisDataResponse)
	err := c.cc.Invoke(ctx, "/hisdata.v1.HisdataService/GetHisData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hisdataServiceClient) GetRealData(ctx context.Context, in *GetRealRequest, opts ...grpc.CallOption) (*GetRealResponse, error) {
	out := new(GetRealResponse)
	err := c.cc.Invoke(ctx, "/hisdata.v1.HisdataService/GetRealData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HisdataServiceServer is the server API for HisdataService service.
// All implementations must embed UnimplementedHisdataServiceServer
// for forward compatibility
type HisdataServiceServer interface {
	GetHisData(context.Context, *GetHisDataRequest) (*GetHisDataResponse, error)
	GetRealData(context.Context, *GetRealRequest) (*GetRealResponse, error)
	mustEmbedUnimplementedHisdataServiceServer()
}

// UnimplementedHisdataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHisdataServiceServer struct {
}

func (UnimplementedHisdataServiceServer) GetHisData(context.Context, *GetHisDataRequest) (*GetHisDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHisData not implemented")
}
func (UnimplementedHisdataServiceServer) GetRealData(context.Context, *GetRealRequest) (*GetRealResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRealData not implemented")
}
func (UnimplementedHisdataServiceServer) mustEmbedUnimplementedHisdataServiceServer() {}

// UnsafeHisdataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HisdataServiceServer will
// result in compilation errors.
type UnsafeHisdataServiceServer interface {
	mustEmbedUnimplementedHisdataServiceServer()
}

func RegisterHisdataServiceServer(s grpc.ServiceRegistrar, srv HisdataServiceServer) {
	s.RegisterService(&HisdataService_ServiceDesc, srv)
}

func _HisdataService_GetHisData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHisDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HisdataServiceServer).GetHisData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hisdata.v1.HisdataService/GetHisData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HisdataServiceServer).GetHisData(ctx, req.(*GetHisDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HisdataService_GetRealData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRealRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HisdataServiceServer).GetRealData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hisdata.v1.HisdataService/GetRealData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HisdataServiceServer).GetRealData(ctx, req.(*GetRealRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HisdataService_ServiceDesc is the grpc.ServiceDesc for HisdataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HisdataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hisdata.v1.HisdataService",
	HandlerType: (*HisdataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHisData",
			Handler:    _HisdataService_GetHisData_Handler,
		},
		{
			MethodName: "GetRealData",
			Handler:    _HisdataService_GetRealData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "hisdata.proto",
}
